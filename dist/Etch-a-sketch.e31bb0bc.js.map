{"version":3,"sources":["node_modules/dom-to-image/src/dom-to-image.js","index.js"],"names":["container","document","querySelector","input","querySelectorAll","randomColor","resetButton","borders","defBorder","downloadButton","isRandom","hasBorder","draw","reset","innerHTML","style","getComputedStyle","documentElement","i","getPropertyValue","getRandomColor","letters","color","Math","floor","random","paint","event","target","background","addEventListener","classList","toggle","contains","blocks","forEach","block","removeEventListener","colorSelector","value","numOfBlocks","numBlock","setProperty","preventDefault","backgroundColor","grids","el","name","innerText","domtoimage","toPng","then","dataUrl","date","Date","toDateString","split","join","link","createElement","download","href","click"],"mappings":"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ACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Etch-a-sketch.e31bb0bc.js","sourceRoot":"..","sourcesContent":["(function (global) {\n    'use strict';\n\n    var util = newUtil();\n    var inliner = newInliner();\n    var fontFaces = newFontFaces();\n    var images = newImages();\n\n    // Default impl options\n    var defaultOptions = {\n        // Default is to fail on error, no placeholder\n        imagePlaceholder: undefined,\n        // Default cache bust is false, it will use the cache\n        cacheBust: false\n    };\n\n    var domtoimage = {\n        toSvg: toSvg,\n        toPng: toPng,\n        toJpeg: toJpeg,\n        toBlob: toBlob,\n        toPixelData: toPixelData,\n        impl: {\n            fontFaces: fontFaces,\n            images: images,\n            util: util,\n            inliner: inliner,\n            options: {}\n        }\n    };\n\n    if (typeof module !== 'undefined')\n        module.exports = domtoimage;\n    else\n        global.domtoimage = domtoimage;\n\n\n    /**\n     * @param {Node} node - The DOM Node object to render\n     * @param {Object} options - Rendering options\n     * @param {Function} options.filter - Should return true if passed node should be included in the output\n     *          (excluding node means excluding it's children as well). Not called on the root node.\n     * @param {String} options.bgcolor - color for the background, any valid CSS color value.\n     * @param {Number} options.width - width to be applied to node before rendering.\n     * @param {Number} options.height - height to be applied to node before rendering.\n     * @param {Object} options.style - an object whose properties to be copied to node's style before rendering.\n     * @param {Number} options.quality - a Number between 0 and 1 indicating image quality (applicable to JPEG only),\n                defaults to 1.0.\n     * @param {String} options.imagePlaceholder - dataURL to use as a placeholder for failed images, default behaviour is to fail fast on images we can't fetch\n     * @param {Boolean} options.cacheBust - set to true to cache bust by appending the time to the request url\n     * @return {Promise} - A promise that is fulfilled with a SVG image data URL\n     * */\n    function toSvg(node, options) {\n        options = options || {};\n        copyOptions(options);\n        return Promise.resolve(node)\n            .then(function (node) {\n                return cloneNode(node, options.filter, true);\n            })\n            .then(embedFonts)\n            .then(inlineImages)\n            .then(applyOptions)\n            .then(function (clone) {\n                return makeSvgDataUri(clone,\n                    options.width || util.width(node),\n                    options.height || util.height(node)\n                );\n            });\n\n        function applyOptions(clone) {\n            if (options.bgcolor) clone.style.backgroundColor = options.bgcolor;\n\n            if (options.width) clone.style.width = options.width + 'px';\n            if (options.height) clone.style.height = options.height + 'px';\n\n            if (options.style)\n                Object.keys(options.style).forEach(function (property) {\n                    clone.style[property] = options.style[property];\n                });\n\n            return clone;\n        }\n    }\n\n    /**\n     * @param {Node} node - The DOM Node object to render\n     * @param {Object} options - Rendering options, @see {@link toSvg}\n     * @return {Promise} - A promise that is fulfilled with a Uint8Array containing RGBA pixel data.\n     * */\n    function toPixelData(node, options) {\n        return draw(node, options || {})\n            .then(function (canvas) {\n                return canvas.getContext('2d').getImageData(\n                    0,\n                    0,\n                    util.width(node),\n                    util.height(node)\n                ).data;\n            });\n    }\n\n    /**\n     * @param {Node} node - The DOM Node object to render\n     * @param {Object} options - Rendering options, @see {@link toSvg}\n     * @return {Promise} - A promise that is fulfilled with a PNG image data URL\n     * */\n    function toPng(node, options) {\n        return draw(node, options || {})\n            .then(function (canvas) {\n                return canvas.toDataURL();\n            });\n    }\n\n    /**\n     * @param {Node} node - The DOM Node object to render\n     * @param {Object} options - Rendering options, @see {@link toSvg}\n     * @return {Promise} - A promise that is fulfilled with a JPEG image data URL\n     * */\n    function toJpeg(node, options) {\n        options = options || {};\n        return draw(node, options)\n            .then(function (canvas) {\n                return canvas.toDataURL('image/jpeg', options.quality || 1.0);\n            });\n    }\n\n    /**\n     * @param {Node} node - The DOM Node object to render\n     * @param {Object} options - Rendering options, @see {@link toSvg}\n     * @return {Promise} - A promise that is fulfilled with a PNG image blob\n     * */\n    function toBlob(node, options) {\n        return draw(node, options || {})\n            .then(util.canvasToBlob);\n    }\n\n    function copyOptions(options) {\n        // Copy options to impl options for use in impl\n        if(typeof(options.imagePlaceholder) === 'undefined') {\n            domtoimage.impl.options.imagePlaceholder = defaultOptions.imagePlaceholder;\n        } else {\n            domtoimage.impl.options.imagePlaceholder = options.imagePlaceholder;\n        }\n\n        if(typeof(options.cacheBust) === 'undefined') {\n            domtoimage.impl.options.cacheBust = defaultOptions.cacheBust;\n        } else {\n            domtoimage.impl.options.cacheBust = options.cacheBust;\n        }\n    }\n\n    function draw(domNode, options) {\n        return toSvg(domNode, options)\n            .then(util.makeImage)\n            .then(util.delay(100))\n            .then(function (image) {\n                var canvas = newCanvas(domNode);\n                canvas.getContext('2d').drawImage(image, 0, 0);\n                return canvas;\n            });\n\n        function newCanvas(domNode) {\n            var canvas = document.createElement('canvas');\n            canvas.width = options.width || util.width(domNode);\n            canvas.height = options.height || util.height(domNode);\n\n            if (options.bgcolor) {\n                var ctx = canvas.getContext('2d');\n                ctx.fillStyle = options.bgcolor;\n                ctx.fillRect(0, 0, canvas.width, canvas.height);\n            }\n\n            return canvas;\n        }\n    }\n\n    function cloneNode(node, filter, root) {\n        if (!root && filter && !filter(node)) return Promise.resolve();\n\n        return Promise.resolve(node)\n            .then(makeNodeCopy)\n            .then(function (clone) {\n                return cloneChildren(node, clone, filter);\n            })\n            .then(function (clone) {\n                return processClone(node, clone);\n            });\n\n        function makeNodeCopy(node) {\n            if (node instanceof HTMLCanvasElement) return util.makeImage(node.toDataURL());\n            return node.cloneNode(false);\n        }\n\n        function cloneChildren(original, clone, filter) {\n            var children = original.childNodes;\n            if (children.length === 0) return Promise.resolve(clone);\n\n            return cloneChildrenInOrder(clone, util.asArray(children), filter)\n                .then(function () {\n                    return clone;\n                });\n\n            function cloneChildrenInOrder(parent, children, filter) {\n                var done = Promise.resolve();\n                children.forEach(function (child) {\n                    done = done\n                        .then(function () {\n                            return cloneNode(child, filter);\n                        })\n                        .then(function (childClone) {\n                            if (childClone) parent.appendChild(childClone);\n                        });\n                });\n                return done;\n            }\n        }\n\n        function processClone(original, clone) {\n            if (!(clone instanceof Element)) return clone;\n\n            return Promise.resolve()\n                .then(cloneStyle)\n                .then(clonePseudoElements)\n                .then(copyUserInput)\n                .then(fixSvg)\n                .then(function () {\n                    return clone;\n                });\n\n            function cloneStyle() {\n                copyStyle(window.getComputedStyle(original), clone.style);\n\n                function copyStyle(source, target) {\n                    if (source.cssText) target.cssText = source.cssText;\n                    else copyProperties(source, target);\n\n                    function copyProperties(source, target) {\n                        util.asArray(source).forEach(function (name) {\n                            target.setProperty(\n                                name,\n                                source.getPropertyValue(name),\n                                source.getPropertyPriority(name)\n                            );\n                        });\n                    }\n                }\n            }\n\n            function clonePseudoElements() {\n                [':before', ':after'].forEach(function (element) {\n                    clonePseudoElement(element);\n                });\n\n                function clonePseudoElement(element) {\n                    var style = window.getComputedStyle(original, element);\n                    var content = style.getPropertyValue('content');\n\n                    if (content === '' || content === 'none') return;\n\n                    var className = util.uid();\n                    clone.className = clone.className + ' ' + className;\n                    var styleElement = document.createElement('style');\n                    styleElement.appendChild(formatPseudoElementStyle(className, element, style));\n                    clone.appendChild(styleElement);\n\n                    function formatPseudoElementStyle(className, element, style) {\n                        var selector = '.' + className + ':' + element;\n                        var cssText = style.cssText ? formatCssText(style) : formatCssProperties(style);\n                        return document.createTextNode(selector + '{' + cssText + '}');\n\n                        function formatCssText(style) {\n                            var content = style.getPropertyValue('content');\n                            return style.cssText + ' content: ' + content + ';';\n                        }\n\n                        function formatCssProperties(style) {\n\n                            return util.asArray(style)\n                                .map(formatProperty)\n                                .join('; ') + ';';\n\n                            function formatProperty(name) {\n                                return name + ': ' +\n                                    style.getPropertyValue(name) +\n                                    (style.getPropertyPriority(name) ? ' !important' : '');\n                            }\n                        }\n                    }\n                }\n            }\n\n            function copyUserInput() {\n                if (original instanceof HTMLTextAreaElement) clone.innerHTML = original.value;\n                if (original instanceof HTMLInputElement) clone.setAttribute(\"value\", original.value);\n            }\n\n            function fixSvg() {\n                if (!(clone instanceof SVGElement)) return;\n                clone.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n\n                if (!(clone instanceof SVGRectElement)) return;\n                ['width', 'height'].forEach(function (attribute) {\n                    var value = clone.getAttribute(attribute);\n                    if (!value) return;\n\n                    clone.style.setProperty(attribute, value);\n                });\n            }\n        }\n    }\n\n    function embedFonts(node) {\n        return fontFaces.resolveAll()\n            .then(function (cssText) {\n                var styleNode = document.createElement('style');\n                node.appendChild(styleNode);\n                styleNode.appendChild(document.createTextNode(cssText));\n                return node;\n            });\n    }\n\n    function inlineImages(node) {\n        return images.inlineAll(node)\n            .then(function () {\n                return node;\n            });\n    }\n\n    function makeSvgDataUri(node, width, height) {\n        return Promise.resolve(node)\n            .then(function (node) {\n                node.setAttribute('xmlns', 'http://www.w3.org/1999/xhtml');\n                return new XMLSerializer().serializeToString(node);\n            })\n            .then(util.escapeXhtml)\n            .then(function (xhtml) {\n                return '<foreignObject x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">' + xhtml + '</foreignObject>';\n            })\n            .then(function (foreignObject) {\n                return '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + width + '\" height=\"' + height + '\">' +\n                    foreignObject + '</svg>';\n            })\n            .then(function (svg) {\n                return 'data:image/svg+xml;charset=utf-8,' + svg;\n            });\n    }\n\n    function newUtil() {\n        return {\n            escape: escape,\n            parseExtension: parseExtension,\n            mimeType: mimeType,\n            dataAsUrl: dataAsUrl,\n            isDataUrl: isDataUrl,\n            canvasToBlob: canvasToBlob,\n            resolveUrl: resolveUrl,\n            getAndEncode: getAndEncode,\n            uid: uid(),\n            delay: delay,\n            asArray: asArray,\n            escapeXhtml: escapeXhtml,\n            makeImage: makeImage,\n            width: width,\n            height: height\n        };\n\n        function mimes() {\n            /*\n             * Only WOFF and EOT mime types for fonts are 'real'\n             * see http://www.iana.org/assignments/media-types/media-types.xhtml\n             */\n            var WOFF = 'application/font-woff';\n            var JPEG = 'image/jpeg';\n\n            return {\n                'woff': WOFF,\n                'woff2': WOFF,\n                'ttf': 'application/font-truetype',\n                'eot': 'application/vnd.ms-fontobject',\n                'png': 'image/png',\n                'jpg': JPEG,\n                'jpeg': JPEG,\n                'gif': 'image/gif',\n                'tiff': 'image/tiff',\n                'svg': 'image/svg+xml'\n            };\n        }\n\n        function parseExtension(url) {\n            var match = /\\.([^\\.\\/]*?)$/g.exec(url);\n            if (match) return match[1];\n            else return '';\n        }\n\n        function mimeType(url) {\n            var extension = parseExtension(url).toLowerCase();\n            return mimes()[extension] || '';\n        }\n\n        function isDataUrl(url) {\n            return url.search(/^(data:)/) !== -1;\n        }\n\n        function toBlob(canvas) {\n            return new Promise(function (resolve) {\n                var binaryString = window.atob(canvas.toDataURL().split(',')[1]);\n                var length = binaryString.length;\n                var binaryArray = new Uint8Array(length);\n\n                for (var i = 0; i < length; i++)\n                    binaryArray[i] = binaryString.charCodeAt(i);\n\n                resolve(new Blob([binaryArray], {\n                    type: 'image/png'\n                }));\n            });\n        }\n\n        function canvasToBlob(canvas) {\n            if (canvas.toBlob)\n                return new Promise(function (resolve) {\n                    canvas.toBlob(resolve);\n                });\n\n            return toBlob(canvas);\n        }\n\n        function resolveUrl(url, baseUrl) {\n            var doc = document.implementation.createHTMLDocument();\n            var base = doc.createElement('base');\n            doc.head.appendChild(base);\n            var a = doc.createElement('a');\n            doc.body.appendChild(a);\n            base.href = baseUrl;\n            a.href = url;\n            return a.href;\n        }\n\n        function uid() {\n            var index = 0;\n\n            return function () {\n                return 'u' + fourRandomChars() + index++;\n\n                function fourRandomChars() {\n                    /* see http://stackoverflow.com/a/6248722/2519373 */\n                    return ('0000' + (Math.random() * Math.pow(36, 4) << 0).toString(36)).slice(-4);\n                }\n            };\n        }\n\n        function makeImage(uri) {\n            return new Promise(function (resolve, reject) {\n                var image = new Image();\n                image.onload = function () {\n                    resolve(image);\n                };\n                image.onerror = reject;\n                image.src = uri;\n            });\n        }\n\n        function getAndEncode(url) {\n            var TIMEOUT = 30000;\n            if(domtoimage.impl.options.cacheBust) {\n                // Cache bypass so we dont have CORS issues with cached images\n                // Source: https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#Bypassing_the_cache\n                url += ((/\\?/).test(url) ? \"&\" : \"?\") + (new Date()).getTime();\n            }\n\n            return new Promise(function (resolve) {\n                var request = new XMLHttpRequest();\n\n                request.onreadystatechange = done;\n                request.ontimeout = timeout;\n                request.responseType = 'blob';\n                request.timeout = TIMEOUT;\n                request.open('GET', url, true);\n                request.send();\n\n                var placeholder;\n                if(domtoimage.impl.options.imagePlaceholder) {\n                    var split = domtoimage.impl.options.imagePlaceholder.split(/,/);\n                    if(split && split[1]) {\n                        placeholder = split[1];\n                    }\n                }\n\n                function done() {\n                    if (request.readyState !== 4) return;\n\n                    if (request.status !== 200) {\n                        if(placeholder) {\n                            resolve(placeholder);\n                        } else {\n                            fail('cannot fetch resource: ' + url + ', status: ' + request.status);\n                        }\n\n                        return;\n                    }\n\n                    var encoder = new FileReader();\n                    encoder.onloadend = function () {\n                        var content = encoder.result.split(/,/)[1];\n                        resolve(content);\n                    };\n                    encoder.readAsDataURL(request.response);\n                }\n\n                function timeout() {\n                    if(placeholder) {\n                        resolve(placeholder);\n                    } else {\n                        fail('timeout of ' + TIMEOUT + 'ms occured while fetching resource: ' + url);\n                    }\n                }\n\n                function fail(message) {\n                    console.error(message);\n                    resolve('');\n                }\n            });\n        }\n\n        function dataAsUrl(content, type) {\n            return 'data:' + type + ';base64,' + content;\n        }\n\n        function escape(string) {\n            return string.replace(/([.*+?^${}()|\\[\\]\\/\\\\])/g, '\\\\$1');\n        }\n\n        function delay(ms) {\n            return function (arg) {\n                return new Promise(function (resolve) {\n                    setTimeout(function () {\n                        resolve(arg);\n                    }, ms);\n                });\n            };\n        }\n\n        function asArray(arrayLike) {\n            var array = [];\n            var length = arrayLike.length;\n            for (var i = 0; i < length; i++) array.push(arrayLike[i]);\n            return array;\n        }\n\n        function escapeXhtml(string) {\n            return string.replace(/#/g, '%23').replace(/\\n/g, '%0A');\n        }\n\n        function width(node) {\n            var leftBorder = px(node, 'border-left-width');\n            var rightBorder = px(node, 'border-right-width');\n            return node.scrollWidth + leftBorder + rightBorder;\n        }\n\n        function height(node) {\n            var topBorder = px(node, 'border-top-width');\n            var bottomBorder = px(node, 'border-bottom-width');\n            return node.scrollHeight + topBorder + bottomBorder;\n        }\n\n        function px(node, styleProperty) {\n            var value = window.getComputedStyle(node).getPropertyValue(styleProperty);\n            return parseFloat(value.replace('px', ''));\n        }\n    }\n\n    function newInliner() {\n        var URL_REGEX = /url\\(['\"]?([^'\"]+?)['\"]?\\)/g;\n\n        return {\n            inlineAll: inlineAll,\n            shouldProcess: shouldProcess,\n            impl: {\n                readUrls: readUrls,\n                inline: inline\n            }\n        };\n\n        function shouldProcess(string) {\n            return string.search(URL_REGEX) !== -1;\n        }\n\n        function readUrls(string) {\n            var result = [];\n            var match;\n            while ((match = URL_REGEX.exec(string)) !== null) {\n                result.push(match[1]);\n            }\n            return result.filter(function (url) {\n                return !util.isDataUrl(url);\n            });\n        }\n\n        function inline(string, url, baseUrl, get) {\n            return Promise.resolve(url)\n                .then(function (url) {\n                    return baseUrl ? util.resolveUrl(url, baseUrl) : url;\n                })\n                .then(get || util.getAndEncode)\n                .then(function (data) {\n                    return util.dataAsUrl(data, util.mimeType(url));\n                })\n                .then(function (dataUrl) {\n                    return string.replace(urlAsRegex(url), '$1' + dataUrl + '$3');\n                });\n\n            function urlAsRegex(url) {\n                return new RegExp('(url\\\\([\\'\"]?)(' + util.escape(url) + ')([\\'\"]?\\\\))', 'g');\n            }\n        }\n\n        function inlineAll(string, baseUrl, get) {\n            if (nothingToInline()) return Promise.resolve(string);\n\n            return Promise.resolve(string)\n                .then(readUrls)\n                .then(function (urls) {\n                    var done = Promise.resolve(string);\n                    urls.forEach(function (url) {\n                        done = done.then(function (string) {\n                            return inline(string, url, baseUrl, get);\n                        });\n                    });\n                    return done;\n                });\n\n            function nothingToInline() {\n                return !shouldProcess(string);\n            }\n        }\n    }\n\n    function newFontFaces() {\n        return {\n            resolveAll: resolveAll,\n            impl: {\n                readAll: readAll\n            }\n        };\n\n        function resolveAll() {\n            return readAll(document)\n                .then(function (webFonts) {\n                    return Promise.all(\n                        webFonts.map(function (webFont) {\n                            return webFont.resolve();\n                        })\n                    );\n                })\n                .then(function (cssStrings) {\n                    return cssStrings.join('\\n');\n                });\n        }\n\n        function readAll() {\n            return Promise.resolve(util.asArray(document.styleSheets))\n                .then(getCssRules)\n                .then(selectWebFontRules)\n                .then(function (rules) {\n                    return rules.map(newWebFont);\n                });\n\n            function selectWebFontRules(cssRules) {\n                return cssRules\n                    .filter(function (rule) {\n                        return rule.type === CSSRule.FONT_FACE_RULE;\n                    })\n                    .filter(function (rule) {\n                        return inliner.shouldProcess(rule.style.getPropertyValue('src'));\n                    });\n            }\n\n            function getCssRules(styleSheets) {\n                var cssRules = [];\n                styleSheets.forEach(function (sheet) {\n                    try {\n                        util.asArray(sheet.cssRules || []).forEach(cssRules.push.bind(cssRules));\n                    } catch (e) {\n                        console.log('Error while reading CSS rules from ' + sheet.href, e.toString());\n                    }\n                });\n                return cssRules;\n            }\n\n            function newWebFont(webFontRule) {\n                return {\n                    resolve: function resolve() {\n                        var baseUrl = (webFontRule.parentStyleSheet || {}).href;\n                        return inliner.inlineAll(webFontRule.cssText, baseUrl);\n                    },\n                    src: function () {\n                        return webFontRule.style.getPropertyValue('src');\n                    }\n                };\n            }\n        }\n    }\n\n    function newImages() {\n        return {\n            inlineAll: inlineAll,\n            impl: {\n                newImage: newImage\n            }\n        };\n\n        function newImage(element) {\n            return {\n                inline: inline\n            };\n\n            function inline(get) {\n                if (util.isDataUrl(element.src)) return Promise.resolve();\n\n                return Promise.resolve(element.src)\n                    .then(get || util.getAndEncode)\n                    .then(function (data) {\n                        return util.dataAsUrl(data, util.mimeType(element.src));\n                    })\n                    .then(function (dataUrl) {\n                        return new Promise(function (resolve, reject) {\n                            element.onload = resolve;\n                            element.onerror = reject;\n                            element.src = dataUrl;\n                        });\n                    });\n            }\n        }\n\n        function inlineAll(node) {\n            if (!(node instanceof Element)) return Promise.resolve(node);\n\n            return inlineBackground(node)\n                .then(function () {\n                    if (node instanceof HTMLImageElement)\n                        return newImage(node).inline();\n                    else\n                        return Promise.all(\n                            util.asArray(node.childNodes).map(function (child) {\n                                return inlineAll(child);\n                            })\n                        );\n                });\n\n            function inlineBackground(node) {\n                var background = node.style.getPropertyValue('background');\n\n                if (!background) return Promise.resolve(node);\n\n                return inliner.inlineAll(background)\n                    .then(function (inlined) {\n                        node.style.setProperty(\n                            'background',\n                            inlined,\n                            node.style.getPropertyPriority('background')\n                        );\n                    })\n                    .then(function () {\n                        return node;\n                    });\n            }\n        }\n    }\n})(this);\n","import domtoimage from \"dom-to-image\";\n\nconst container = document.querySelector(\"#container\");\nconst input = document.querySelectorAll(\"input\");\nconst randomColor = document.querySelector(\"#random-color\");\nconst resetButton = document.querySelector(\"#reset\");\nconst borders = document.querySelector(\"#borders\");\nconst defBorder = \"1px solid black\";\nconst downloadButton = document.querySelector('#download');\n\nlet isRandom = false;\nlet hasBorder = true;\nlet draw = true;\n\n//Reset\nfunction reset() {\n  container.innerHTML = \"\";\n  const style = getComputedStyle(document.documentElement);\n  for (let i = 0; i < style.getPropertyValue(\"--grid-size\") ** 2; ++i) {\n    container.innerHTML += '<div class = \"grid\"/>';\n  }\n}\nreset();\n\n//Random Color Generator\nfunction getRandomColor() {\n  const letters = \"0123456789ABCDEF\";\n  let color = \"#\";\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}\n\n//Paint Function\nfunction paint(event){\n    if(isRandom)\n        color = getRandomColor();\n    event.target.style.background = color;\n}\n\n//Paint Start - End\ncontainer.addEventListener('click', (event) => {\n    container.classList.toggle('on');\n    if(container.classList.contains('on'))\n        blocks.forEach(block => block.addEventListener('mouseover', paint));\n    else \n        blocks.forEach(block => block.removeEventListener('mouseover', paint));\n});\n\n//Color Selector\ncolorSelector.addEventListener('input', (event) => {\n    color = event.target.value;\n});\n\n//Num Block Change Handler\nnumOfBlocks.addEventListener('input', (event) => {\n    numBlock = event.target.value; \n    document.documentElement.style.setProperty(\"--grid-size\",numBlock);\n    reset();\n});\n\n//Random Color Button\nrandomColor.addEventListener('click', (event) => {\n    event.preventDefault();\n    isRandom = !isRandom;\n    event.target.innerHTML = `Random Color:  ${(isRandom) ? 'On' : \"Off\"}`;\n});\n\n//Reset Button\nresetButton.addEventListener('click', reset);\n\nfunction paint({ target }) {\n  if (isRandom)\n    document.documentElement.style.setProperty(\"--color\", getRandomColor());\n  target.style.backgroundColor = getComputedStyle(\n    document.documentElement\n  ).getPropertyValue(\"--color\");\n}\n\n/***************Event Listener***************/\ncontainer.addEventListener(\"click\", () => {\n  const grids = document.querySelectorAll(\".grid\");\n  grids.forEach((el) => {\n    if (draw) el.addEventListener(\"mouseover\", paint);\n    else el.removeEventListener(\"mouseover\", paint);\n  });\n  draw = !draw;\n});\n\ninput.forEach((el) =>\n  el.addEventListener(\"input\", ({ target }) => {\n    document.documentElement.style.setProperty(\n      `--${target.name}`,\n      target.value\n    );\n    if (target.name === \"grid-size\") reset();\n  })\n);\n\nrandomColor.addEventListener(\"click\", ({ target }) => {\n  isRandom = !isRandom;\n  target.innerText = `Random Color: ${isRandom ? \"On\" : \"Off\"}`;\n});\n\nresetButton.addEventListener(\"click\", reset);\n\nborders.addEventListener(\"click\", ({ target }) => {\n  hasBorder = !hasBorder;\n  target.innerText = `Border: ${hasBorder ? \"On\" : \"Off\"}`;\n  document.documentElement.style.setProperty(\n    \"--outline\",\n    hasBorder ? defBorder : \"none\"\n  );\n});\n\ndownloadButton.addEventListener('click', () => {\n  domtoimage.toPng(container)\n  .then(dataUrl => {\n    const date = new Date();\n    const name = date.toDateString().split(' ').join('_'); \n    const link = document.createElement('a');\n    link.download = `Image_${name}.png`;\n    link.href = dataUrl;\n    link.click();\n  });\n});\n"]}